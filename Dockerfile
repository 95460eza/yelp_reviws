
# THE ARG INSTRUCTION ALLOWS TO "DEFINE" SOME "BUILD-TIME" VARIABLES THAT WILL BE PASSED
# HERE WE CHOOSE THAT "PYTHON_DOCKER_IMAGE" WILL BE PASSED AS AN ARGUMENT WHEN RUNNING THE "DOCKER BUILD" COMMAND 
ARG PYTHON_DOCKER_IMAGE


# THE NAME OF THE EXISTING DOCKER IMAGE THAT WE WILL PROVIDE IN THE "DOCKER BUILD" COMMAND WILL BE USED AS THE "BASE" IMAGE FOR THE IMAGE WE ARE CREATING
# WE ALSO GIVE AN ALIAS TO THE BASE IMAGE USED FOR EASE OF RE-USING IT IN SUBSEQUENT STEPS
#FROM $PYTHON_DOCKER_IMAGE AS python-base
FROM ${PYTHON_DOCKER_IMAGE:-python:3.9-slim}

# We need to add the path of our virtual env to our $PATH environment variable :
# THE PATH VARIABLE CONTAINS THE DIRECTORIES THAT ARE AVAILABLE AT ALL TIME DURING 
# WE ADD TO IT OUR "LOCAL" VIRTUAL ENVIRONMENT "DIRECTORY" SO THAT THE PYTHON "PACKAGES" "LOCALLY INSTALLED" ARE ACCESSIBLE DURING THE CONTAINER'S BUILD RUNTIME
ENV PATH="/venv-eat-here/bin:$PATH"


# Our builder image WILL install the libraries
# RECALL: EACH "FROM" COMMAND CREATES A "NEW CLEAN" IMAGE 
#FROM python-base AS python-builder
FROM python:latest


# BECAUSE THE BASE IMAGE IS BUILD ON LINUX ENVIRONMENT, WE Install necessary build TOOLS like gcc (C compiler) to COMPILE some Python libraries.
RUN apt-get update && \
    apt-get upgrade -y && \
    apt-get install -y gcc \
    && apt-get clean



# INSTRUCTION "BEFORE" THE COMMAND "WORKDIR /app" WILL BE EXECUTED IN THE "DEFAULT" DIRECTORY "OF" (TARGET) THE "CONTAINER" (/)
# INSTRUCTIONS "AFTER" THE COMMAND "WORKDIR /app" USE "/app" as the "DEFAULT" DIRECTORY SO THAT FILES WILL BE COPIED RELATIVE TO THIS DIRECTORY AND COMMANDS WILL BE RUN INSIDE THE 
#/app" DIRECTORY "OF" THE "CONTAINER"
WORKDIR /app


# ALL THOSE ARE EQUIVALENT: "COPY ./requirements.txt ./", "COPY ./requirements.txt .", "COPY ./requirements.txt ./", "COPY requirements.txt ./"
#THE "/" JUST INDICATES THAT IT IS A DIRECTORY WHERE WE ARE COPYING. 
# THE "." MEANS RELATIVE TO THE DIRECTORY WHERE THE DOCKERFILE IS WHEN REFERRING TO MY MACHINE OR INSIDE THE DIRECTORY IN THE CONTAINER SET BY "WORKDIR..." WHEN REFERRING TO CONTAINER
COPY ./requirements.txt ./requirements.txt


# CREATE EMPTY VIRTUAL ENVIRONMENT
RUN python -m venv venv-eat-here

# Install requirements
RUN pip install --upgrade pip
RUN pip install --no-cache-dir -r requirements.txt

# Installs Gunicorn a WSGI HTTP server for running Python web applications.
#RUN pip install gunicorn


# Our final image uses the same python-base image but now we aim to create A SLIMMER, production-ready image.
# RECALL: EACH "FROM" COMMAND CREATES A "NEW CLEAN" IMAGE 
#FROM python-base


# FILES FROM "python-builder" ARE THEN SELECTIVELY COPIED USING "COPY --from=python-builder"
# COPIES TO THE FINAL IMAGE THE VIRTUAL ENVIRONMENT CREATED IN THE BUILDER STAGE TO HAVE THE PACKAGES INSTALLED DURING THAT STAGE ARE AVAILABLE IN THE CONTAINER 
#COPY --from=python-builder /yelp/venv-eat-here  ./venv-eat-here



# IF YOU HAVE SET "WORKDIR /app", YOU CAN SIMPLIFY "COPY ./app /app" WITH
# BELOW WILL COPY  THE CONTENT OF YOUR LOCAL FOLDER "./app" RELATIVE TO WHERE THE DOCKERFILE IS INTO THE "/app" DIRECTORY OF THE CONTAINER (TARGET) B/C "." REFERS TO THE "/app" directory INSIDE THE 
COPY ./app .


# REQUIRED PORT 7860 FOR  DEPLOYMENT VIA CONTAINER ON HUGGING FACE
EXPOSE 8080

ENTRYPOINT gunicorn --bind 0.0.0.0:8080 main:app


